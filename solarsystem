GlowScript 2.7 VPython
from visual import *
from visual.graph import *

scene = display (title = 'Planets Orbiting the Sun', width = 800, height = 800, range = vec(25000, 25000, 25000), center = vec(1000, 0, 0))
scene.autoscale = True 

G = -6.7*10**-4

sun = sphere (pos=vec(0,0,0), radius = 100, texture = textures.stucco, color = color.yellow, mass = 10)

class Planet:
    def __init__(self, pos, radius, textures, color_p, val, mass, angle, real_ratio):
        self.pos = pos
        self.radius = radius
        self.textures = textures
        self.color_p = color_p
        self.vel = vel
        self.mass = mass
        self.angle = angle
        self.real_ratio = real_ratio
        
        self.planet = sphere(pos=pos, radius=radius, texture=texture, color=color_p)
        self.planet.trail = curve(color=color_p)
        self.planet.velocity = vel
        
        self.ratio_c = gcurve(gdisplay = graphSpeedRatios, color = color_p)
        self.real_ratio_c = gdots(gdisplay = graphSpeedRatios, color = color_p)
        
        self.distance = 0
        self.unit_vector = 0
        self.Fgrav = 0
        self.ratio = 0
        
planet_list = [
    mercury = Planet(vec(200,0,0), 50, textures.wood, color.red, vector(0,0,295), 3.29*10**3, radians(10), 1.600),
    venus  = Planet(vec(373.664,0,0), 50, textures.wood, color.orange, vector(0,0,225), 4.87*10**4, radians(20), 1.177),
    earth = Planet(vec(516.664,0,0), 50, textures.earth,  color.yellow, vector(0,0,195), 6.0*10**4, radians(30), 1.000),
    mars = Planet(vec(787.222,0,0), 50, textures.wood, color.green, vector(0,0,155), 6.39*10**3, radians(15), 0.805),
    jupiter = Planet(vec(2688.068,0,0), 75, textures.gravel, color.cyan, vector(0,0,70), 1.90*10**7, radians(15), 0.437),
    saturn = Planet(vec(4920.048,0,0), 75, textures.gravel, color.blue, vector(0,0,50), 5.68*10**6, radians(15), 0.324),
    uranus = Planet(vec(9924.19,0,0), 75, textures.wood, color.magenta, vector(0,0,30), 8.68*10**5, radians(15), 0.228),
    neptune = Planet(vec(15544.811,0,0), 75, textures.wood, color.red, vector(0,0,23), 1.02*10**6, radians(15), 0.182),
    pluto = Planet(vec(20534.968,0,0), 75, textures.wood, color.orange, vector(0,0,0.1), 1.31*10**2, radians(15), 0.158)
]

t = 0
deltat = .01
time_interval = 0.05
time_interval_int = int(time_interval/deltat)

graphpos = gdisplay (x=600, y=0, xtitle = "Time", ytitle="Position", width = 600, height=400, title="Position vs.Time of Earth")
earthposx = gcurve(gdisplay=graphpos, color = color.blue)

graphv = gdisplay(x=600, y=500, xtitle = "Time", ytitle="Velocity", width = 600, height = 400, foreground = color.black, background = color.white, title= "Velocity vs. Time of Earth")
earthvelocity = gcurve(gdisplay = graphv, color = color.blue)
tlist = []
vlist = []
graphGPE = gdisplay (x=800, y=500, xtitle = "Position", ytitle ="Gravitational Potential Energy", width = 600, height = 400, title = "GPE vs. Position of Earth to Sun")
earthGPE = gcurve(gdisplay = graphGPE, color = color.green)

graphSpeedRatios = gdisplay (x=600, y=500, xtitle = "Time", ytitle="Speed Ratio", width = 600, height = 400, title = "Planet Speed Ratios to Earth vs. Time")

moon = sphere (pos=vec(516.664+5.0016, 0,0), radius = 10, color=color.white)
moon.trail = curve (color = moon.color)
moon.velocitylocal = vector(0,0,195+1)

m_sun = 2*10**10
m_spaceship =  7.0*10**5

check = True
while check :
    rate(10000)
    
    for i in planet_list:
        i.planet.trail.append(pos=i.planet.pos)
        i.distance = mag(i.planet.pos)
        i.unit_vector = (i.planet.pos - sun.pos)/i.distance
        
        self.planet.velocity += (i.Fgrav/i.mass)*deltat
        self.planet.pos +=  self.planet.velocity*deltat
        self.planet.rotate(angle = i.angle, axis = vec(0,1,0))
        
        i.ratio = mag(self.planet.velocity)/mag(earth.velocity)
        
        if i.distance <= sun.radius : check = False
        
        i.ratio_c.plot(pos=(t, i.ratio))
        i.real_ratio_c.plot(pos=(t, i.real_ratio))
    
    earthposx.plot(pos=(t,earth.pos.x))
    earthvelocity.plot(pos=(t,earth.velocity.x))
    earthGPE.plot(pos=(earth.pos.x,earth_GPE))
    
    vlist.append(earth.velocity.x)
    tlist.append(t)
    
    t += deltat
